// –ö–Ω–æ–ø–∫–∞ "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å", —è–∫–∞ –±—É–¥–µ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –∑ —Ñ–æ—Ä–º–æ—é –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ—Ñ—ñ–ª—é, –≤–∫–ª—é—á–∞—é—á–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ

import React, { useState } from 'react';
import { doc, updateDoc } from 'firebase/firestore';
import { db, auth } from '../../services/firebase';
import { getStorage, ref, uploadBytes, getDownloadURL } from 'firebase/storage';
import '../../styles/EditProfile.css';
import { useDropzone } from 'react-dropzone';

const storage = getStorage();

const EditProfile = ({ userData, setUserData, setIsEditing }) => {
    const [formData, setFormData] = useState({
        firstName: userData.firstName,
        lastName: userData.lastName,
        birthDate: userData.birthDate,
        gender: userData.gender,
        interests: userData.interests || '',
        country: userData.country || '',
        city: userData.city || '',   
        facebook: userData.facebook || '',
        instagram: userData.instagram ||'',  
        telegram: userData.telegram || '',
        linkedIn: userData.linkedIn || '',
        phone: userData.phone || '',
        additionalEmail: userData.additionalEmail || '',
        profilePhoto: userData.profilePhoto || '', 
    });
    const [message, setMessage] = useState(null); // –°—Ç–∞–Ω –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    const [messageType, setMessageType] = useState(''); // –¢–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: 'success' –∞–±–æ 'error'
    const [isUploading, setIsUploading] = useState(false);

    const { getRootProps, getInputProps } = useDropzone({
        accept: 'image/*',
        maxFiles: 1,
        onDrop: async (acceptedFiles) => {
            if (acceptedFiles.length > 0) {
                const file = acceptedFiles[0];
                await uploadProfilePhoto(file);
            }
        },
    });

    const uploadProfilePhoto = async (file) => {
        try {
            setIsUploading(true);
            const storageRef = ref(storage, `profilePhotos/${auth.currentUser.uid}`);
            await uploadBytes(storageRef, file);
            const downloadURL = await getDownloadURL(storageRef);
            setFormData((prev) => ({ ...prev, profilePhoto: downloadURL }));
            setMessage('–§–æ—Ç–æ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!');
            setMessageType('success');
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–æ—Ç–æ:', error);
            setMessage('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–æ—Ç–æ.');
            setMessageType('error');
        } finally {
            setIsUploading(false);
        }
    };

    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData((prevData) => ({
            ...prevData,
            [name]: value,
        }));
    };

    const handleSave = async () => {
        try {
            const userDocRef = doc(db, 'users', auth.currentUser.uid);
            await updateDoc(userDocRef, formData);
            setUserData((prevData) => ({ ...prevData, ...formData }));
            setMessage('–ü—Ä–æ—Ñ—ñ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!');
            setMessageType('success');
            setTimeout(() => setMessage(null), 3000); // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥–∏
            setIsEditing(false); // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –ø—Ä–æ—Ñ—ñ–ª—é –ø—ñ—Å–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é:', error);
            setMessage('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
            setMessageType('error');
        }
    };

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è (–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ)
const handleEditPhoto = () => {
    document.querySelector('input[type="file"]').click(); // –í–∏–∫–ª–∏–∫–∞—î –¥—ñ–∞–ª–æ–≥ –≤–∏–±–æ—Ä—É —Ñ–∞–π–ª—É
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–æ—Ç–æ
const handleDeletePhoto = () => {
    setFormData((prevData) => ({
        ...prevData,
        profilePhoto: '', // –í–∏–¥–∞–ª—è—î–º–æ —Ñ–æ—Ç–æ –∑ state
    }));
};

    return (
        <div className="edit-profile-container">
            <h2>–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é</h2>
            {message && <div className={`message ${messageType}`}>{message}</div>}
            <div className="profile-photo-edit">
        <img
            src={formData.profilePhoto || 'default-profile.png'}
            alt="–§–æ—Ç–æ –ø—Ä–æ—Ñ—ñ–ª—é"
            className="profile-photo-preview"
        />
    </div>

    <div className="photo-actions">
        <button className="icon-button" onClick={handleEditPhoto}>
            ‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏
        </button>
        <button className="icon-button delete" onClick={handleDeletePhoto}>
            üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏
        </button>
    </div>

    <div className="photo-dropzone" {...getRootProps()}>
        <input {...getInputProps()} />
        <p>{isUploading ? '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...' : '–ü–µ—Ä–µ—Ç—è–≥–Ω—ñ—Ç—å —Ñ–æ—Ç–æ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –¥–ª—è –≤–∏–±–æ—Ä—É'}</p>
    </div>
            <h3>–û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è</h3>
            {message && (
                <div className={`message ${messageType}`}>
                    {message}
                </div>
            )}
            <label>
                –Ü–º'—è
                <input type="text" name="firstName" value={formData.firstName} onChange={handleChange} />
            </label>
            <label>
                –ü—Ä—ñ–∑–≤–∏—â–µ
                <input type="text" name="lastName" value={formData.lastName} onChange={handleChange} />
            </label>
            <label>
                –î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è
                <input type="date" name="birthDate" value={formData.birthDate} onChange={handleChange} />
            </label>
            <label>
                –°—Ç–∞—Ç—å
                <select name="gender" value={formData.gender} onChange={handleChange}>
                    <option value="–ß–æ–ª–æ–≤—ñ–∫">–ß–æ–ª–æ–≤—ñ–∫</option>
                    <option value="–ñ—ñ–Ω–∫–∞">–ñ—ñ–Ω–∫–∞</option>
                    <option value="–Ü–Ω—à–µ">–Ü–Ω—à–µ</option>
                </select>
            </label>
            <label>
                –Ü–Ω—Ç–µ—Ä–µ—Å–∏ —Ç–∞ —Ö–æ–±–±—ñ
                <textarea name="interests" value={formData.interests} onChange={handleChange} />
            </label>
            <label>–ö—Ä–∞—ó–Ω–∞
                <input type='text' name='country' value={formData.country} onChange={handleChange}/>
            </label>
            <label>–ú—ñ—Å—Ç–æ
                <input type='text' name='city' value={formData.city} onChange={handleChange}/>
            </label>
            <h3>–°–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ —Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∏</h3>
            <label>Facebook
                <input type='text' name='facebook' value={formData.facebook} onChange={handleChange}/>
            </label>
            <label>Instagram
                <input type='text' name='instagram' value={formData.instagram} onChange={handleChange}/>
            </label>
            <label>Telegram
                <input type='text' name='telegram' value={formData.telegram} onChange={handleChange}/>
            </label>
            <label>LinkedIn
                <input type='text' name='linkedIn' value={formData.linkedIn} onChange={handleChange}/>
            </label>
            <label>–¢–µ–ª–µ—Ñ–æ–Ω
                <input type='text' name='phone' value={formData.phone} onChange={handleChange}/>
            </label>
            <label>–î–æ–¥–∞—Ç–∫–æ–≤–∏–π email
                <input type='email' name='additionalEmail' value={formData.additionalEmail} onChange={handleChange}/>
            </label>
            <button onClick={handleSave} className="save-button">–ó–±–µ—Ä–µ–≥—Ç–∏</button>
            <button onClick={() => setIsEditing(false)} className="back-button-edit">–ù–∞–∑–∞–¥</button>
        </div>
    );
};

export default EditProfile;
